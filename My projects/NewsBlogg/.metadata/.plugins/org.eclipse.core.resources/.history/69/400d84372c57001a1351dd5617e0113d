package com.example.NewsBlogg.controller;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.NewsBlogg.dto.RequestCreateNews;
import com.example.NewsBlogg.dto.RequestPassword;
import com.example.NewsBlogg.dto.RequestRegister;
import com.example.NewsBlogg.model.Articles;
import com.example.NewsBlogg.model.Chiff;
import com.example.NewsBlogg.model.User;
import com.fasterxml.jackson.databind.ObjectMapper;

@Controller
public class ViewController {
	
	private ConcurrentHashMap<String, User> users = new ConcurrentHashMap<>();
	
////  @Autowired
//  public ViewController() {
//      users.put("Sergey", new User("Sergey", "12345"));
//  }qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq

  @GetMapping("/first")
  private String first(Model model) throws  IOException, InterruptedException, URISyntaxException{
	  

		var httpClient = HttpClient.newHttpClient();
		var httpRequest = HttpRequest.newBuilder()
				
				.GET()
				.uri(new URI("http://newsapi.org/v2/top-headlines?country=ua&apiKey=bb3713121d6847c3b30abd3ab2bf5459"))
				.build();
			
				
				
				var httpResponse = httpClient.send(httpRequest, BodyHandlers.ofString());
			
			
				var objectMapper = new ObjectMapper();
				var chiff = objectMapper.readValue(httpResponse.body(), Articles.class);
	  
      model.addAttribute("first", chiff.getArticles());
      return "first";
  }
  
  @GetMapping("/login")
  private String login(Model model) {
      model.addAttribute("request", new RequestPassword());
      return "login";
  }
  
  @GetMapping("/registration")
  private String registration(Model model) {
      model.addAttribute("request", new RequestRegister());
      return "registration";
  }
  
//  @PostMapping("/registration")
//  private String registerNewUser(Model model, @ModelAttribute RequestPassword request) {
//	 users.put(request.getLogin(), new User(request.getLogin(),request.getPassword()));
//	  return "redirect:/login";
//  }
  
  @GetMapping("/{login}/createNews")
  private String getAdminPage(Model model, @PathVariable(name="login")String login, @RequestParam(name="password")String password) {
      model.addAttribute("request", new RequestCreateNews(login,password));
      return "adminn";
  }
  
  @PostMapping("/{login}/createNews")
  private String createNews(Model model, @PathVariable(name="login")String login, @RequestParam(name="password")String password) {
	  model.addAttribute("request", new RequestCreateNews(login,password));
	  System.out.println("I create news");
      return "adminn";
  }
   
  @PostMapping("/login")
  private String getUsername(Model model, @ModelAttribute RequestPassword request) {
      System.out.println(request);
      System.out.println("login " + request.getLogin());
      System.out.println("password " + request.getPassword());
      if (!users.containsKey(request.getLogin())) {
          model.addAttribute("error", true);
          model.addAttribute("request", new RequestPassword());
          return "login";
      }
      if (!users.get(request.getLogin()).getPassword().equals(request.getPassword())) {
          model.addAttribute("error", true);
          model.addAttribute("request", new RequestPassword());
          return "login";
      }
      model.addAttribute("user", users.get(request.getLogin()));
      model.addAttribute("request", new RequestPassword());
      return "redirect:/" + request.getLogin() + "/createNews?password=" + request.getPassword();
  }

  


}

